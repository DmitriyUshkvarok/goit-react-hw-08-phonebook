{"version":3,"file":"static/js/42.7efb10fa.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","redux/contactSelector.js","pages/ContactPage/ContactPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formTitle\":\"ContactForm_formTitle__N6O4g\",\"form\":\"ContactForm_form__dhl+T\",\"inputWrapper\":\"ContactForm_inputWrapper__9zhfJ\",\"label\":\"ContactForm_label__-cVXI\",\"inputName\":\"ContactForm_inputName__a8jFO\",\"inputNumber\":\"ContactForm_inputNumber__DBiVZ\",\"btnSubmit\":\"ContactForm_btnSubmit__+7wnS\"};","import css from './ContactForm.module.css';\nimport {\n  useCreateContactMutation,\n  useGetContactsQuery,\n} from 'redux/contactApi';\nimport { toast } from 'react-toastify';\nimport { useState } from 'react';\n\nfunction ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const [createContact, { isLoading }] = useCreateContactMutation();\n  const { data: contacts } = useGetContactsQuery();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const existingContact = contacts?.find(\n      contact =>\n        contact.name.toLowerCase() === name.toLowerCase() &&\n        contact.phone === number\n    );\n\n    if (existingContact) {\n      toast.error(`${name} already exists in the contact list.`);\n      return;\n    }\n\n    createContact({ name, number })\n      .then(() => {\n        toast.success(`${name} is added to the contact list.`);\n        setName('');\n        setNumber('');\n      })\n      .catch(() => {\n        toast.error(`Failed to add ${name} to the contact list.`);\n      });\n  };\n\n  const handleNameChange = event => {\n    setName(event.target.value);\n  };\n\n  const handlePhoneChange = event => {\n    setNumber(event.target.value);\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <h1 className={css.formTitle}>PhoneBook</h1>\n      <div className={css.inputWrapper}>\n        <label className={css.label}>\n          Name\n          <input\n            className={css.inputName}\n            value={name}\n            onChange={handleNameChange}\n            placeholder=\"name\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label className={css.label}>\n          Number\n          <input\n            className={css.inputNumber}\n            value={number}\n            onChange={handlePhoneChange}\n            placeholder=\"number\"\n            type=\"tel\"\n            name=\"phone\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n      </div>\n      <button\n        className={css.btnSubmit}\n        type=\"submit\"\n        aria-label=\"button-submit\"\n        disabled={isLoading}\n      >\n        {isLoading ? 'Adding...' : 'Add contact'}\n      </button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"inputFilter\":\"Filter_inputFilter__8QMOp\"};","import { useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/contactsSlice';\nimport css from './Filter.module.css';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const changeFieldFilter = e => {\n    const value = e.currentTarget.value;\n    dispatch(changeFilter(value));\n  };\n  return (\n    <label>\n      <input\n        className={css.inputFilter}\n        placeholder=\"Enter to search...\"\n        type=\"text\"\n        name=\"filter\"\n        onChange={changeFieldFilter}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"link\":\"ContactItem_link__P+TvW\",\"name\":\"ContactItem_name__XjpNK\",\"numberWrapper\":\"ContactItem_numberWrapper__iMXvn\",\"number\":\"ContactItem_number__mfZ8x\",\"btnDeleted\":\"ContactItem_btnDeleted__4MiFC\"};","// import PropTypes from 'prop-types';\nimport { FcCellPhone } from 'react-icons/fc';\nimport css from './ContactItem.module.css';\nimport { useDeleteContactMutation } from 'redux/contactApi';\nimport { toast } from 'react-toastify';\n\nfunction ContactItem({ id, name, phone }) {\n  const [deleteContact] = useDeleteContactMutation();\n\n  const deleteSelectedContact = id => {\n    deleteContact(id);\n    toast.error(`Failed to add ${name} to the contact list.`);\n  };\n\n  return (\n    <>\n      <a className={css.link} href=\"tel:{number}\">\n        <p className={css.name}>{name}</p>\n        <div className={css.numberWrapper}>\n          <p className={css.number}>{phone}</p>\n          <FcCellPhone />\n        </div>\n      </a>\n      <button\n        className={css.btnDeleted}\n        type=\"button\"\n        onClick={() => deleteSelectedContact(id)}\n      >\n        Delete\n      </button>\n    </>\n  );\n}\n\nexport default ContactItem;\n\n// ContactItem.propTypes = {\n//   id: PropTypes.string.isRequired,\n//   name: PropTypes.string.isRequired,\n//   number: PropTypes.string.isRequired,\n// };\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\",\"filterInfo\":\"ContactList_filterInfo__4B4PV\",\"loadingList\":\"ContactList_loadingList__xRSR-\"};","import ContactItem from '../ContactItem/ContactItem';\nimport css from './ContactList.module.css';\nimport { useSelector } from 'react-redux';\nimport { useGetContactsQuery } from 'redux/contactApi';\nimport { getFilter } from 'redux/contactSelector';\n\nfunction ContactList() {\n  const { data: contacts, isFetching, error } = useGetContactsQuery();\n  const { filter } = useSelector(state => getFilter(state));\n\n  const filteredContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return (\n      contacts &&\n      contacts.filter(contact =>\n        contact.name.toLowerCase().includes(normalizedFilter)\n      )\n    );\n  };\n\n  const filteredContactList = filteredContacts();\n\n  if (!filteredContactList || filteredContactList.length === 0) {\n    return <p className={css.filterInfo}>There's nothing here yet...</p>;\n  }\n\n  if (isFetching) {\n    return <p className={css.loadingList}>Loading...</p>;\n  }\n\n  if (error) {\n    return <p>An error occurred: {error.message}</p>;\n  }\n\n  return (\n    <ul className={css.contactList}>\n      {filteredContactList &&\n        filteredContactList.map(({ id, name, phone }) => {\n          return (\n            <li className={css.item} key={id}>\n              <ContactItem id={id} name={name} phone={phone} />\n            </li>\n          );\n        })}\n    </ul>\n  );\n}\n\nexport default ContactList;\n","export const getFilter = state => state.filter;\n","import Container from 'components/Container/Container';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\n\nconst ContactPage = () => {\n  return (\n    <Container>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </Container>\n  );\n};\n\nexport default ContactPage;\n"],"names":["useState","name","setName","number","setNumber","useCreateContactMutation","createContact","isLoading","contacts","useGetContactsQuery","data","className","css","onSubmit","event","preventDefault","find","contact","toLowerCase","phone","toast","then","catch","value","onChange","target","placeholder","type","pattern","title","required","disabled","dispatch","useDispatch","e","currentTarget","changeFilter","id","useDeleteContactMutation","deleteContact","href","onClick","deleteSelectedContact","isFetching","error","filter","useSelector","state","getFilter","filteredContactList","normalizedFilter","includes","filteredContacts","length","message","map","Container"],"sourceRoot":""}